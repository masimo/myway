<?xml version="1.0" encoding="UTF-8"?>
<con:soapui-project id="f6df660f-ec5e-4042-86e9-41322cb84abc" activeEnvironment="Default" name="myway REST service" resourceRoot="" soapui-version="5.2.0" abortOnError="false" runType="SEQUENTIAL" xmlns:con="http://eviware.com/soapui/config"><con:settings/><con:restMockService id="a57fca39-fd1f-4f28-9070-4813abadbe13" port="8080" path="/" host="localhost" name="REST MockService 1" docroot=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.panels.mock.WsdlMockServiceDesktopPanel$LogListModel@maxSize">100</con:setting></con:settings><con:properties/><con:restMockAction name="/criteria/autosuggest" method="POST" resourcePath="/criteria/autosuggest" id="8c9fb2de-1473-4cc9-8bd1-c932486ff1d4"><con:settings/><con:defaultResponse xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Autosuggest response" id="6193996b-6c50-4abb-bd7c-d6747551f728" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:responseContent>{
    "current_page": 1,
    "total_items": 20,
    "criterias": [{
        "id": 1,
        "name": "castle",
        "description": "Замок",
        "type": "PLACES"
    }, {
        "id": 2,
        "name": "castle",
        "description": "Замок 2",
        "type": "PLACES"
    }, {
        "id": 22,
        "name": "castle",
        "description": "Замок 2",
        "type": "PLACES"
    }]
}</con:responseContent></con:response></con:restMockAction><con:restMockAction name="/criteria/search" method="POST" resourcePath="/criteria/search" id="c16668f1-7596-4f36-8c12-8c9eb6526570"><con:settings/><con:defaultResponse>Search respounse</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Search respounse" id="8fea6b71-cf81-4bc8-8de4-4d3b88a3c41d" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:responseContent>{
	blocks: [{
		"picture_url": "https://lh3.googleusercontent.com/-VO3Pz_V6fn4/VV9HPxvsNFI/AAAAAAAAAhc/zYPRGkwmEcQ/s203-k-no/",
		"label": "Title",
		"short_description": "Often he would be surrounded by an eager circle, all waiting to be served; holding boat-spades, pike-heads, harpoons, and lances, and jealously watching his every sooty movement, as he toiled. Nevertheless, this old mans was a patient hammer wielded by a patient arm."
	}, {
		"picture_url": "https://lh3.googleusercontent.com/-VO3Pz_V6fn4/VV9HPxvsNFI/AAAAAAAAAhc/zYPRGkwmEcQ/s203-k-no/",
		"label": "Title",
		"short_description": "Often he would be surrounded by an eager circle. Nevertheless, this old mans was a patient hammer wielded by a patient arm."
	}, {
		"picture_url": "https://lh3.googleusercontent.com/-VO3Pz_V6fn4/VV9HPxvsNFI/AAAAAAAAAhc/zYPRGkwmEcQ/s203-k-no/",
		"label": "Title",
		"short_description": "Often he would be surrounded by an eager circle, all waiting to be served; holding boat-spades, pike-heads, harpoons, and lances, and jealously watching his every sooty movement, as he toiled. Nevertheless, this old mans was a patient hammer wielded by a patient arm. Nevertheless, this old mans was a patient hammer wielded by a patient arm."
	}, {
		"picture_url": "https://lh3.googleusercontent.com/-VO3Pz_V6fn4/VV9HPxvsNFI/AAAAAAAAAhc/zYPRGkwmEcQ/s203-k-no/",
		"label": "Title",
		"short_description": "Often he would be surrounded by an eager circle, and lances, and jealously watching his every sooty movement, as he toiled. Nevertheless, this old mans was a patient hammer wielded by a patient arm."
	}, {
		"picture_url": "https://lh3.googleusercontent.com/-VO3Pz_V6fn4/VV9HPxvsNFI/AAAAAAAAAhc/zYPRGkwmEcQ/s203-k-no/",
		"label": "Title",
		"short_description": "All waiting to be served; holding boat-spades, pike-heads, harpoons, and lances, and jealously watching his every sooty movement, as he toiled. Nevertheless, this old mans was a patient hammer wielded by a patient arm."
	}, {
		"picture_url": "https://lh3.googleusercontent.com/-VO3Pz_V6fn4/VV9HPxvsNFI/AAAAAAAAAhc/zYPRGkwmEcQ/s203-k-no/",
		"label": "Title",
		"short_description": "Often he would be surrounded by an eager circle, pike-heads, harpoons, and lances, and jealously watching his every sooty movement, as he toiled. Nevertheless, this old mans was a patient hammer wielded by a patient arm."
	}]
}</con:responseContent><con:header><con:name/><con:value/></con:header></con:response></con:restMockAction></con:restMockService><con:properties/><con:wssContainer/><con:oAuth2ProfileContainer/><con:sensitiveInformation/></con:soapui-project>